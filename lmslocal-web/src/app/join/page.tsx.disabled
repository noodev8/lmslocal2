'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { 
  TrophyIcon,
  UserGroupIcon,
  QrCodeIcon,
  ArrowLeftIcon
} from '@heroicons/react/24/outline';
import axios from 'axios';
import { setAuthData } from '@/lib/auth';

const API_BASE = 'http://localhost:3015';

export default function JoinCompetitionPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  
  const [competitionCode, setCompetitionCode] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    // Check if code is pre-filled from URL path like /join/ABC123
    const code = searchParams.get('code');
    if (code) {
      setCompetitionCode(code.toUpperCase());
    }
  }, [searchParams]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      // Generate display name from email for new users
      const emailPrefix = email.trim().toLowerCase().split('@')[0];
      const displayName = emailPrefix.charAt(0).toUpperCase() + emailPrefix.slice(1);

      const response = await axios.post(`${API_BASE}/join-by-code`, {
        competition_code: competitionCode.toUpperCase().trim(),
        display_name: displayName,
        email: email.trim().toLowerCase(),
        password: password
      });

      if (response.data.return_code === 'SUCCESS') {
        // Store auth data consistently, clearing any existing tokens first
        setAuthData(response.data.jwt_token, response.data.user, {
          current_competition: response.data.competition
        });

        // Redirect to player dashboard
        router.push('/play');
      } else {
        setError(response.data.message || 'Failed to join competition');
      }
    } catch (err: any) {
      if (err.response?.data?.message) {
        setError(err.response.data.message);
      } else {
        setError('Network error. Please try again.');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
    if (value.length <= 6) {
      setCompetitionCode(value);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center">
              <Link href="/" className="flex items-center">
                <TrophyIcon className="h-8 w-8 text-green-600" />
                <span className="ml-2 text-xl font-bold text-gray-900">LMSLocal</span>
              </Link>
            </div>
            <div className="flex items-center space-x-4">
              <Link href="/login" className="text-sm text-gray-600 hover:text-gray-900">
                Admin Login
              </Link>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

        {/* Header */}
        <div className="text-center mb-8">
          <div className="bg-blue-100 rounded-full p-3 w-16 h-16 mx-auto mb-4 flex items-center justify-center">
            <UserGroupIcon className="h-8 w-8 text-blue-600" />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Join a Competition</h1>
          <p className="text-lg text-gray-600">
            Enter your competition code and create your account to start playing!
          </p>
        </div>

        {/* Entry Options */}
        <div className="bg-white rounded-lg border border-gray-200 p-6 mb-8">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">How to Join</h2>
          
          {/* QR Code Option */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
            <div className="flex items-center">
              <QrCodeIcon className="h-6 w-6 text-blue-600 mr-3" />
              <div>
                <h3 className="font-medium text-blue-900">QR Code Scanner</h3>
                <p className="text-sm text-blue-700">Look for a QR code at your venue (coming soon)</p>
              </div>
            </div>
          </div>

          {/* Manual Entry */}
          <div className="border border-gray-200 rounded-lg p-4">
            <div className="flex items-center mb-2">
              <UserGroupIcon className="h-6 w-6 text-gray-600 mr-3" />
              <h3 className="font-medium text-gray-900">Competition Code</h3>
            </div>
            <p className="text-sm text-gray-600">Enter the 6-character code from your invitation</p>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Competition Code Section */}
          <div className="bg-white rounded-lg border border-gray-200 p-6">
            <div className="mb-4">
              <h2 className="text-lg font-semibold text-gray-900 mb-2">1. Competition Code</h2>
              <p className="text-sm text-gray-600">
                Enter the code from your invitation
              </p>
            </div>

            <div>
              <label htmlFor="competitionCode" className="block text-sm font-medium text-gray-700 mb-2">
                Competition Code *
              </label>
              <input
                type="text"
                id="competitionCode"
                value={competitionCode}
                onChange={handleCodeChange}
                placeholder="ABC123"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg text-center text-lg font-mono tracking-widest uppercase focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                required
                maxLength={6}
              />
              <p className="text-xs text-gray-500 mt-1">6-character alphanumeric code</p>
            </div>
          </div>

          {/* Account Details Section */}
          <div className="bg-white rounded-lg border border-gray-200 p-6">
            <div className="mb-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-2">2. Account Details</h2>
              <p className="text-sm text-gray-600">
                Sign in with existing account or create new one
              </p>
            </div>
            {/* Account Authentication */}
            <div className="space-y-4">
              {/* Email */}
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                  Email Address *
                </label>
                <input
                  type="email"
                  id="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="john@example.com"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>

              {/* Password */}
              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                  Password *
                </label>
                <input
                  type="password"
                  id="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="Your password"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                  minLength={8}
                />
                <p className="text-xs text-gray-500 mt-1">
                  Existing users: your current password â€¢ New users: create password (8+ chars)
                </p>
              </div>
            </div>

            <div className="mt-6"></div>

            {/* Error Message */}
            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                <p className="text-sm text-red-700">{error}</p>
              </div>
            )}

            {/* Submit Button */}
            <button
              type="submit"
              disabled={loading || !competitionCode || !email || !password}
              className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {loading ? (
                <div className="flex items-center justify-center">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                  Joining Competition...
                </div>
              ) : (
                'Join Competition'
              )}
            </button>
          </div>
        </form>

        {/* Help Text */}
        <div className="text-center mt-8">
          <p className="text-sm text-gray-500">
            Need help? Contact your competition organiser
          </p>
        </div>
      </main>
    </div>
  );
}