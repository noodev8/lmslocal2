/*
=======================================================================================================================================
Join by Code Route - Streamlined player onboarding
=======================================================================================================================================
*/

const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { query, transaction, populateAllowedTeams } = require('../database');
const router = express.Router();

/*
=======================================================================================================================================
API Route: /join-by-code
=======================================================================================================================================
Method: POST
Purpose: Streamlined player join - create account if needed and auto-join competition
=======================================================================================================================================
Request Payload:
{
  "competition_code": "ABC123",      // string, required - competition access code
  "display_name": "John Smith",      // string, required - player display name
  "email": "john@example.com",       // string, required - player email
  "password": "password123"          // string, required - user password (min 8 chars)
}

Success Response:
{
  "return_code": "SUCCESS",
  "message": "Successfully joined competition",
  "user": {
    "id": 15,
    "display_name": "John Smith",
    "email": "john@example.com"
  },
  "jwt_token": "eyJhbGciOiJIUzI1NiIs...",
  "competition": {
    "id": 123,
    "name": "Premier League LMS 2025"
  }
}
=======================================================================================================================================
Return Codes:
"SUCCESS"
"VALIDATION_ERROR"
"COMPETITION_NOT_FOUND"
"INVALID_ACCESS_CODE"
"INVALID_PASSWORD"
"COMPETITION_STARTED"
"ROUND_LOCKED"
"ALREADY_JOINED"
"SERVER_ERROR"
=======================================================================================================================================
*/
router.post('/', async (req, res) => {
  try {
    const { competition_code, display_name, email, password } = req.body;

    // Basic validation
    if (!competition_code || typeof competition_code !== 'string') {
      return res.status(400).json({
        return_code: "VALIDATION_ERROR",
        message: "Competition code is required"
      });
    }

    if (!display_name || typeof display_name !== 'string' || display_name.trim().length < 2) {
      return res.status(400).json({
        return_code: "VALIDATION_ERROR",
        message: "Display name must be at least 2 characters"
      });
    }

    if (!email || typeof email !== 'string' || !email.includes('@')) {
      return res.status(400).json({
        return_code: "VALIDATION_ERROR",
        message: "Valid email address is required"
      });
    }

    if (!password || typeof password !== 'string' || password.length < 8) {
      return res.status(400).json({
        return_code: "VALIDATION_ERROR",
        message: "Password must be at least 8 characters"
      });
    }

    // Get competition by access code with round info
    const competitionResult = await query(`
      SELECT c.id, c.name, c.slug, c.status, c.invite_code, c.lives_per_player,
             MAX(r.round_number) as current_round,
             MAX(r.lock_time) as latest_lock_time
      FROM competition c
      LEFT JOIN round r ON c.id = r.competition_id
      WHERE c.invite_code = $1 OR c.slug = $1
      GROUP BY c.id, c.name, c.slug, c.status, c.invite_code, c.lives_per_player
    `, [competition_code.trim()]);

    if (competitionResult.rows.length === 0) {
      return res.status(404).json({
        return_code: "COMPETITION_NOT_FOUND",
        message: "Competition not found with that code"
      });
    }

    const competition = competitionResult.rows[0];

    // Validate access code (if using invite_code, not slug)
    if (competition.invite_code && competition.invite_code !== competition_code.trim()) {
      return res.status(400).json({
        return_code: "INVALID_ACCESS_CODE",
        message: "Invalid competition code"
      });
    }

    // Check if joining is still allowed
    const currentRound = competition.current_round;
    const latestLockTime = competition.latest_lock_time;
    
    // Allow joining if:
    // 1. No rounds exist yet, OR
    // 2. We're still in round 1 and it hasn't locked yet
    if (currentRound && currentRound > 1) {
      return res.status(400).json({
        return_code: "COMPETITION_STARTED",
        message: "Cannot join - competition has already started"
      });
    }
    
    if (currentRound === 1 && latestLockTime && new Date() > new Date(latestLockTime)) {
      return res.status(400).json({
        return_code: "ROUND_LOCKED",
        message: "Cannot join - Round 1 has already started"
      });
    }

    // Check if user already exists
    const existingUserResult = await query(
      'SELECT id, display_name, email, password_hash FROM app_user WHERE email = $1',
      [email.trim().toLowerCase()]
    );

    let user;
    let isNewUser = false;

    if (existingUserResult.rows.length === 0) {
      // Hash password
      const saltRounds = 12;
      const hashedPassword = await bcrypt.hash(password, saltRounds);

      // Create new user account
      const userResult = await query(`
        INSERT INTO app_user (display_name, email, password_hash, email_verified, created_at, updated_at)
        VALUES ($1, $2, $3, true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        RETURNING id, display_name, email, created_at
      `, [display_name.trim(), email.trim().toLowerCase(), hashedPassword]);

      user = userResult.rows[0];
      isNewUser = true;
    } else {
      // Existing user - verify password
      const existingUser = existingUserResult.rows[0];
      
      if (!existingUser.password_hash) {
        return res.status(400).json({
          return_code: "VALIDATION_ERROR",
          message: "Account exists but has no password. Please use forgot password to set one."
        });
      }

      const passwordMatch = await bcrypt.compare(password, existingUser.password_hash);
      if (!passwordMatch) {
        return res.status(400).json({
          return_code: "INVALID_PASSWORD",
          message: "Incorrect password for this email address"
        });
      }

      user = existingUser;
    }

    // Check if user already joined this competition
    const existingMemberResult = await query(`
      SELECT id, status, lives_remaining FROM competition_user
      WHERE competition_id = $1 AND user_id = $2
    `, [competition.id, user.id]);

    if (existingMemberResult.rows.length > 0) {
      // Already joined - return existing status with token
      const playerStatus = existingMemberResult.rows[0];
      
      const jwtPayload = {
        user_id: user.id,
        email: user.email,
        display_name: user.display_name
      };

      const jwtToken = jwt.sign(jwtPayload, process.env.JWT_SECRET, { 
        expiresIn: '7d' 
      });

      return res.json({
        return_code: "SUCCESS",
        message: "Welcome back! You're already in this competition",
        user: {
          id: user.id,
          display_name: user.display_name,
          email: user.email
        },
        jwt_token: jwtToken,
        competition: {
          id: competition.id,
          name: competition.name
        }
      });
    }

    // Join user to competition
    const joinResult = await query(`
      INSERT INTO competition_user (competition_id, user_id, status, lives_remaining, joined_at)
      VALUES ($1, $2, 'active', $3, CURRENT_TIMESTAMP)
      RETURNING status, lives_remaining, joined_at
    `, [competition.id, user.id, competition.lives_per_player]);

    const playerStatus = joinResult.rows[0];

    // Populate allowed teams for this player
    await populateAllowedTeams(competition.id, user.id);

    // Generate JWT token
    const jwtPayload = {
      user_id: user.id,
      email: user.email,
      display_name: user.display_name
    };

    const jwtToken = jwt.sign(jwtPayload, process.env.JWT_SECRET, { 
      expiresIn: '7d' 
    });

    const welcomeMessage = isNewUser ? 
      "Account created and joined competition successfully!" :
      "Successfully joined competition!";

    res.json({
      return_code: "SUCCESS",
      message: welcomeMessage,
      user: {
        id: user.id,
        display_name: user.display_name,
        email: user.email
      },
      jwt_token: jwtToken,
      competition: {
        id: competition.id,
        name: competition.name
      }
    });

  } catch (error) {
    console.error('Join by code error:', error);
    res.status(500).json({
      return_code: "SERVER_ERROR",
      message: "Internal server error"
    });
  }
});

module.exports = router;