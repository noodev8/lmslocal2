/*
=======================================================================================================================================
Register and Join Competition Route - Create account and auto-join competition
=======================================================================================================================================
*/

const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { query, transaction, populateAllowedTeams } = require('../database');
const router = express.Router();

/*
=======================================================================================================================================
API Route: /register-and-join-competition
=======================================================================================================================================
Method: POST
Purpose: Register new user and automatically join them to competition
=======================================================================================================================================
Request Payload:
{
  "slug": "10001",                     // string, required - competition slug
  "display_name": "John Smith",        // string, required - user display name
  "email": "john@example.com",         // string, required - user email
  "password": "password123",           // string, required - user password
  "access_code": "ABC123"              // string, required - competition access code
}

Success Response:
{
  "return_code": "SUCCESS",
  "message": "Registration and join successful",
  "user": {
    "id": 15,
    "display_name": "John Smith",
    "email": "john@example.com"
  },
  "jwt_token": "eyJhbGciOiJIUzI1NiIs...",
  "player_status": {
    "lives_remaining": 1,
    "status": "active",
    "joined_at": "2025-08-25T10:00:00Z"
  }
}
=======================================================================================================================================
Return Codes:
"SUCCESS"
"VALIDATION_ERROR"
"EMAIL_EXISTS"
"COMPETITION_NOT_FOUND"
"INVALID_ACCESS_CODE"
"COMPETITION_LOCKED"
"ALREADY_JOINED"
"SERVER_ERROR"
=======================================================================================================================================
*/
router.post('/', async (req, res) => {
  try {
    const { slug, display_name, email, password, access_code } = req.body;

    // Basic validation
    if (!slug || typeof slug !== 'string') {
      return res.status(400).json({
        return_code: "VALIDATION_ERROR",
        message: "Competition slug is required"
      });
    }

    if (!display_name || typeof display_name !== 'string' || display_name.trim().length < 2) {
      return res.status(400).json({
        return_code: "VALIDATION_ERROR",
        message: "Display name must be at least 2 characters"
      });
    }

    if (!email || typeof email !== 'string' || !email.includes('@')) {
      return res.status(400).json({
        return_code: "VALIDATION_ERROR",
        message: "Valid email address is required"
      });
    }

    if (!password || typeof password !== 'string' || password.length < 6) {
      return res.status(400).json({
        return_code: "VALIDATION_ERROR",
        message: "Password must be at least 6 characters"
      });
    }

    if (!access_code || typeof access_code !== 'string') {
      return res.status(400).json({
        return_code: "VALIDATION_ERROR",
        message: "Access code is required"
      });
    }

    // Start transaction
    const { pool } = require('../database');
    const client = await pool.connect();
    try {
      await client.query('BEGIN');

      // Get competition and validate access code
      const competitionResult = await client.query(`
        SELECT id, name, slug, status, invite_code, lives_per_player
        FROM competition
        WHERE slug = $1
      `, [slug]);

      if (competitionResult.rows.length === 0) {
        await client.query('ROLLBACK');
        return res.status(404).json({
          return_code: "COMPETITION_NOT_FOUND",
          message: "Competition not found"
        });
      }

      const competition = competitionResult.rows[0];

      // Validate access code
      if (competition.invite_code !== access_code.trim()) {
        await client.query('ROLLBACK');
        return res.status(400).json({
          return_code: "INVALID_ACCESS_CODE",
          message: "Invalid access code"
        });
      }

      // Check if email already exists
      const existingUserResult = await client.query(
        'SELECT id FROM app_user WHERE email = $1',
        [email.trim().toLowerCase()]
      );

      if (existingUserResult.rows.length > 0) {
        await client.query('ROLLBACK');
        return res.status(400).json({
          return_code: "EMAIL_EXISTS",
          message: "Email address already registered"
        });
      }

      // Hash password
      const saltRounds = 12;
      const hashedPassword = await bcrypt.hash(password, saltRounds);

      // Create user account
      const userResult = await client.query(`
        INSERT INTO app_user (display_name, email, password, is_verified, created_at, updated_at)
        VALUES ($1, $2, $3, true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        RETURNING id, display_name, email, created_at
      `, [display_name.trim(), email.trim().toLowerCase(), hashedPassword]);

      const newUser = userResult.rows[0];

      // Check if user already joined this competition
      const existingMemberResult = await client.query(`
        SELECT id FROM competition_user
        WHERE competition_id = $1 AND user_id = $2
      `, [competition.id, newUser.id]);

      if (existingMemberResult.rows.length > 0) {
        await client.query('ROLLBACK');
        return res.status(400).json({
          return_code: "ALREADY_JOINED",
          message: "User already joined this competition"
        });
      }

      // Join user to competition
      const joinResult = await client.query(`
        INSERT INTO competition_user (competition_id, user_id, status, lives_remaining, joined_at)
        VALUES ($1, $2, 'active', $3, CURRENT_TIMESTAMP)
        RETURNING status, lives_remaining, joined_at
      `, [competition.id, newUser.id, competition.lives_per_player]);

      const playerStatus = joinResult.rows[0];

      // Generate JWT token
      const jwtPayload = {
        user_id: newUser.id,
        email: newUser.email,
        display_name: newUser.display_name
      };

      const jwtToken = jwt.sign(jwtPayload, process.env.JWT_SECRET, { 
        expiresIn: '7d' 
      });

      // Commit transaction
      await client.query('COMMIT');

      // Populate allowed teams for this player (after transaction)
      await populateAllowedTeams(competition.id, newUser.id);

      res.json({
        return_code: "SUCCESS",
        message: "Registration and join successful",
        user: {
          id: newUser.id,
          display_name: newUser.display_name,
          email: newUser.email
        },
        jwt_token: jwtToken,
        player_status: {
          lives_remaining: playerStatus.lives_remaining,
          status: playerStatus.status,
          joined_at: playerStatus.joined_at
        }
      });

    } catch (transactionError) {
      await client.query('ROLLBACK');
      throw transactionError;
    } finally {
      client.release();
    }

  } catch (error) {
    console.error('Register and join competition error:', error);
    res.status(500).json({
      return_code: "SERVER_ERROR",
      message: "Internal server error"
    });
  }
});

module.exports = router;